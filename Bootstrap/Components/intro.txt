LEARN BOOTSTRAP 5: UTILITIES AND COMPONENTS
Adding Colors
Bootstrap utility classes provide an element with styling and purpose. Let’s get acquainted with utility classes by styling the color of our elements.

Let’s say we want to change the text color of our paragraph element from the default black to blue. We would add a class of "text-primary", like so:

<p class="text-primary">This text is blue!</p>
According to the documentation, the "text" portion of the class targets the element’s text styling. Appending "primary" after "text" changes the text color to blue. The name of the class, "text-primary", also signifies that this <p> element conveys information that appears first, i.e, is the primary text.

We could have used any of the classes provided in Bootstrap’s color example to change the text color of our <p> element.

Similarly, we can also change the background color:

<div class="bg-success">
  Green! This signifies success! 
</div>
In the example above, we’ve assigned the <div> element a class of "bg-success". The "bg" part references the element’s background and "success" changes the background color to green. We can also tell from the name of the class that this <div> element is meant to be used when something happened/worked. We can find more background utility classes at Bootstrap’s background color examples.

To get the full range of what we can do with Bootstrap’s color utility classes, check out Bootstrap’s colors documentation. Now, let’s add some color to our own examples.

Instructions
1.
Change the text color of the <p> element to yellow by assigning its class a value of "text-warning".

Styling Text
If we want to style and format text, we can use Bootstrap’s text utility classes.

For instance, if we want our text to be bold, we could add a class of "font-weight-bold" like so:

<p class="font-weight-bold">
  This rendered text is bold.
</p>
We can also combine Bootstrap classes for additional styling. Let’s say we wanted our text to also be uppercased. We would add "text-uppercase" to the class attribute:

<p class="font-weight-bold text-uppercase">
  This rendered text is both bold and uppercased. 
</p>
Let’s make use of these text utility classes!

1.
In the <body>, there is an unstyled <p> that we can practice styling on.

Let’s first make the <p>‘s text entirely uppercased by assigning it a class of "text-uppercase".

Since you want to make all the text in uppercase, you want to transform the text, so look at: Bootstrap’s text transform documentation.

2.
Let’s keep styling our text! This time, add a utility class to the <p> and make the text italicized.

We should consult Bootstrap’s font weight and italics documentation for what utility class to add.

3.
We should add one more class to practice our documentation reading skills.

Browse Bootstrap’s documentation to find the utility class that will right align the <p> element’s text.

2.
Under the <p> element, there is a <div> element. Change the background color of the <div> element to teal by adding a class of "bg-info".

You can check Bootstrap’s Color example for more information.

3.
Locate the last unstyled <div> element and change the background color to green and the text color to white.

You’ll need to browse Bootstrap’s colors documentation to know which two classes to add!

To change the background color to green we need to assign the <div>‘s class a value of "bg-success".

<div class="bg-success">
  ...
</div>
Then to make the text white, add another class of "text-white":

<div class="bg-success text-white">
  ...
</div>
Check out Bootstrap’s Colors documentation for more information.

Element Positioning
When considering the layout of a webpage, we have to think about how to position our elements. Conveniently, Bootstrap provides positioning utility classes.

We can apply CSS positioning styling by assigning an element a utility class found in Bootstrap’s positioning documentation. It would also be worth knowing how these position are rendered on a webpage.

For example, if we want an element that is fixed to the top, we can apply a "fixed-top" class:

<div class="fixed-top">
  This div will be fixed at the top of the screen. 
</div>
There are a few other positioning utility classes, so let’s explore how to use them!

1.
In index.html, there is an <h1> element that we want to stick to the top. Look up what class to add to the <h1> at Bootstrap’s positioning documentation.

Look over Bootstrap’s sticky top example to apply the sticky top utility class.

2.
Now the <h1> element should stick to the top even after we’ve scrolled past it.

Let’s also fix the <footer> to the bottom of the page using a Bootstrap utility class. You’ll have to scroll to the bottom of index.html to find the <footer> element.

The Navigation Component
In addition to useful utility classes, Bootstrap offers a collection of components, such as a navbar, buttons, a carousel/slideshow for images, and much more! Each Bootstrap component serves a distinct purpose and we can find examples and code snippets directly from the documentation — then, we can tweak the components to our personal needs.

The first component we’ll investigate is the navigation (nav) component which offers our users a collection of links. The nav component is slightly different from a navbar component. The nav component is often specific to one or a few webpages, whereas a navbar often appears on all the pages of a website.

There are many ways to create a basic nav component. Here’s one example:

<ul class="nav">
  <li class="nav-item">
    <a class="nav-link" href="#">First Link</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" href="#">Second Link</a>
  </li>
</ul>
In the above example:

We created a navigation component using an <ul> that has a class of "nav".
The <ul> has nested <li> elements which each have a class of "nav-item".
Inside each <li> is an <a> which has a class of "nav-link".
Alternatively, for a simpler nav component of only links:

<nav class="nav">
  <a class="nav-link" href="#">First Link</a>
  <a class="nav-link" href="#">Second Link</a>
</nav>
Notice that we still have the parent element with a class of "nav" and the children elements with a class of "nav-link". Both examples render the same links, but we might choose one example over the other depending on how we want our layout to look.

Read through Bootstrap’s nav documentation for more information.

1.
We’ll begin the process of piecing together a gardening website using various Bootstrap components.

Let’s utilize the navigation component we learned about and transform the current <nav>.

Assign the <nav> a class of "nav".

2.
Apply a class of "nav-link" to each of the <a> elements to provide some Bootstrap styling.

The ordering of the element’s attributes doesn’t matter. You can add the class before or after the href.

3.
While we’re at it, let’s also center the links.

Find out what class to add the nav component using Bootstrap’s Nav documentation.

The Button Component
Another common component we see on websites are buttons. Buttons represent a clickable object that does something else in return like navigating to a different page, submitting a form, or opening a popup, just to name a few.

By default, the <button> element doesn’t have much styling. But, with Bootstrap we can make button components that have more styling. Here’s an example from Bootstrap’s button documentation :

<button type="button" class="btn btn-danger">Danger</button>
The example above will render a red button that has the text Danger inside the button:

It has a type of "button".
It has two classes, "btn" and "btn-danger".
The "btn" class provides Bootstrap’s default button styling.
The "btn-danger" turns the button red and conveys the purpose of the button, i.e. clicking this button might not be safe!
Visit Bootstrap’s button documentation for a comprehensive list of how to create and use button components.

We’ll add some interactivity and make the buttons do something in the following exercises. For now, let’s practice creating Bootstrap button components.

1.
For the Click here for more info button, it already has a class of "btn". We want to add a class to give this button a teal color.

According to the Bootstrap’s button examples we need to add the class "btn-info" to make it teal.

2.
Let’s turn the Plant now button into a green button.

Follow the Bootstrap’s button example and add the classes, "btn" and "btn-success" to the <button> element.

3.
Now use your documentation reading skills and make the This button acts like a link button resemble an actual link.

Look over Bootstrap’s button example for what two classes to add.

From the Bootstrap’s button examples:

<button type="button" class="btn btn-link">Link</button>
We should add the classes "btn" and "btn-link" to make the button resemble a link.

Collapsing a Component
Bootstrap also allows us to quickly add interactivity to a webpage. One way to include interactivity is to toggle the visibility of an element.

To add such a feature, we need two elements and a few attributes — one element with content and another element that switches the visibility of the previous element. For example:

<button class="btn btn-primary" type="button" data-toggle="collapse" data-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
  This button controls the following div's visibility. 
</button>
 
<div class="collapse" id="collapseExample">
  <p>This content's visibility gets toggled</p>
</div>
In the example above, we have a <button> element that toggles the visibility of the <div> element below it.

The button has an attribute data-toggle="collapse" which enables button’s toggle ability. Another attribute, data-target="#collapseExample", means that this button toggles the visibility of the element with the id of "collapseExample". The aria-expanded and aria-controls attributes are information for screen readers and other accessibility means.

Focusing our attention on the <div> below the button, notice that it has a class of "collapse", which hides the content when the webpage initially renders. Our <div> also has an id of "collapseExample" which corresponds to the value of the button’s data-target.

With both elements set up, we’ve made our page interactive! Look up Bootstrap’s collapse documentation for additional ways of incorporating collapse.

Instructions
1.
Some of Gloria’s Gardening users might be interested in seed specials. Let’s make this content collapsible so it’s only relevant to users who want to click and learn more.

Locate the row with collapsible content to find the elements you’ll need to manipulate.

Change the value of the <button>‘s data-target to "#seedSpecial". Then, add a data-toggle attribute and assign it a value of "collapse".

Locate the <a> above the nav component. It already has the necessary classes and type. You need to change the value of the href attribute and add the data-toggle attribute with a value of "collapse".

2.
Now let’s make the content inside the <p> element, below the <button> element, collapsible. Add a class of "collapse". Also, assign an id of "seedSpecial".

After you’ve run your code and passed this checkpoint, play around with the button in the browser and watch the text appear and disappear!

Creating a Navbar
Let’s combine our knowledge of collapse, buttons, and the nav component to make a responsive navbar! We often find navbars at the top of websites and we can use a navbar to quickly navigate to useful/important pages on the website.

Below is an example from Bootstrap’s Navbar documentation that we’ve modified:

<nav class="navbar navbar-expand-lg navbar-light bg-light">
  <a class="navbar-brand" href="#">Brand Goes Here</a>
  <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
    <span class="navbar-toggler-icon"></span>
  </button>
 
  <div class="collapse navbar-collapse" id="navbarSupportedContent">
    <ul class="navbar-nav">
      <li class="nav-item active">
        <a class="nav-link" href="#">Current Page Link <span class="sr-only">(current)</span></a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="#">Another Page Link</a>
      </li>
    </ul>
  </div>
</nav>
There’s a lot going on, so let’s break it down before we use it in our own code:

We have a <nav> element with multiple classes:
"navbar" makes this <nav> a Bootstrap navbar.
"navbar-expand-lg" renders the <div class="collapse navbar-collapse"> element on large (and extra large screens). The "lg" portion is called a breakpoint and refers to screen size widths. We can append one of any breakpoint value at the end, i.e. "sm", "md", "lg", or "xl".
"navbar-light" assigns a color scheme to the navbar.
"bg-light" assigns a background color to the navbar.
Inside the <nav> is an <a> with a class of "navbar-brand" which can be an image or text that represents the brand/logo of the website.
There is a <button> that renders when a user’s screen size is smaller than the breakpoint value in "navbar-expand-{breakpoint}" and toggles the visibility of the navbar menu to save space.
If the user’s screen size matches the breakpoint (or is bigger), then the <div>, with the nav component and its links, renders instead of the button.
The <ul> and the nested <li> make up a nav component.
The first <li> has a class of "active" which highlights the user’s current page.

1.
We have some HTML in place for a navbar but we have to add some classes to make it a responsive Bootstrap navbar component.

Use the comments to locate the navbar component. The <nav> already has two classes for styling. You will have to add two more classes: "navbar" and "navbar-expand-sm".
The <nav> should have both classes like so:

<nav class="navbar-light bg-light navbar navbar-expand-sm">
</nav>
The layout of this navbar will change based on the "sm" breakpoint.

2.
Under the opening <nav> tag, add an <a> element with a class of "navbar-brand".

Then copy and paste the following <img> to nest inside the <a> element:

<img src="https://content.codecademy.com/courses/learn-bootstrap-components/logo.png" alt="Gloria's Gardening Logo" height="30">

You can provide an href="#" attribute if you want but it’s not necessary to pass the checkpoint.

3.
The <button> and the collapsible <div> is already included, but we still need to make the <ul> and accompanying <li> and <a> elements into a nav component.

Assign the <ul> a class of "navbar-nav"
Assign all the <li> elements a class of "nav-item"
Assign all the <a> elements a class of "nav-link"

The HTML elements already exist, you have to assign the correct class to each element.

4.
Time to highlight the current page using the "active" class.

Add the "active" class to the first <li> element.

Notice after you add the change and run your code that the "Home" text has a subtle styling difference compared to the other two links in the navbar.

If you have a small screen, you may have to click on the button on the navbar to view the links.

The Jumbotron Component
In arenas and stadiums, there are giant screens called jumbotrons which display the main event for everyone in the crowd to see. Bootstrap also offers a jumbotron component that serves a similar function and makes content stand out.

Here’s an example of a basic jumbotron that only contains text:

<div class="jumbotron">
  <h1>Wow this stands out!</h1>
</div>
In the example above we included an <h1> element, but we could add images or a variety of Bootstrap components. Look over Bootstrap’s jumbotron documentation for more elaborate examples.

1.
Use the comments to locate where you’ll put the jumbotron component.

Inside the column of that row, add a <div> and assign it a class of "jumbotron".

2.
Inside the jumbotron, add some content relevant to Gloria’s Gardening! It can be anything you want, just make sure it’s not blank!

Adding a Card
Bootstrap also has a card component that serves as a container for smaller customized content. Card components are often grouped together to display a collection of similar content in manageable chunks. We can draw a comparison of the card component to playing cards in deck — in both cases, there are cards grouped together and each one contains something different.

Below is an example modified from Bootstrap’s card documentation:

<div class="card">
  <img class="card-img-top" src="placeholder.jpg" alt="card example image">
  <div class="card-body">
    <h5 class="card-title">Card title</h5>
    <p class="card-text">Card description goes here.</p>
    <a href="#" class="card-link">Link to somewhere.</a>
  </div>
</div>
Let’s highlight a few key points from the example:

To make a card component we need to assign a class of "card" to an element.
Inside the card component, there are two children, an <img> and a <div> element.
The <img> has a class of "card-img-top" which adds styling and formatting to the image.
The <div> has a class of "card-body" which adds a section with default padding.
The content inside the card body all have classes with "card-{value}" which adds styling to these elements specific for Bootstrap cards.
By default, this card will take up the entire width of its parent element.
Let’s add some of our own cards, remember to check Bootstrap’s card documentation for more customizations!

1.
Under the jumbotron is a row with 2 nested columns set up for our card components.

Inside the first column, add a <div> and assign it a class of "card". We’ll be making a garden related card for the webpage.

Look for the comment Add your first card below and add your code inside that column.

2.
Use the Bootstrap’s card documentation to add a header.

The text in the header should read Planting in the spring. Check the hint if you need help navigating the documentation:

Bootstrap’s card header and footer section has an example for how to add a header.

Your code might look like:

<div class="card">
  <div class="card-header">
    Planting in the spring
  </div>
</div>
3.
Below the header add an image that renders at the top of the card.

Use the image from this link:

https://content.codecademy.com/courses/learn-bootstrap-components/flowers.png
Also, remember to assign the appropriate class.

Bootstrap’s card image section has an example for how to add an image.

Your code might look like:

<div class="card">
  <div class="card-header">
    Planting in the Spring
  </div>
  <img class="card-img-top" src="https://content.codecademy.com/courses/learn-bootstrap-components/flowers.png" alt="planting in the spring">
</div>
4.
Time to add more text to this card:
Under the image, add a <div> with a class of "card-body".

Inside the <div> you just made, add <p> with a class of "card-text". The text should read It's almost spring time, get your seeds ready for planting!

Browse Bootstrap’s card titles, text, and links section for a more detailed example.

At this point, your code might look like:

<div class="card">
  <div class="card-header">
    Planting in the Spring
  </div>
  <img class="card-img-top" src="https://content.codecademy.com/courses/learn-bootstrap-components/flowers.png" alt="planting in the spring">
  <div class="card-body">
    <p class="card-text">
      It's almost Spring time, get your seeds ready for planting!
    </p>
  </div>
</div>
5.
Great job adding a card to the page. Now, add your own customized card to the 2nd column!

If you want to add another image, feel free to use: https://content.codecademy.com/courses/learn-bootstrap-components/tropical.png.

It can be anything you want, but make sure you have at least a card component inside the column.

The Carousel Component
There are times that we want to showcase a group of images but not want to have our users scroll through one picture on top of another. Instead, we could fit our images into a slideshow using Bootstrap’s carousel component.

Bootstrap has many carousel examples but let’s go through a basic example together:

<div id="carouselExampleSlidesOnly" class="carousel slide" data-ride="carousel">
  <div class="carousel-inner">
    <div class="carousel-item active">
      <img class="d-block w-100" src="example_slide_1.png" alt="First slide">
    </div>
    <div class="carousel-item">
      <img class="d-block w-100" src="example_slide_2.png" alt="Second slide">
    </div>
  </div>
</div>
The example above will render a slideshow that loops through two images, displaying one at a time. In the actual code:

The parent <div> element has an id of "carouselExampleSlidesOnly", two classes "carousel" and "slide", and the attribute data-ride="carousel".
The id is used later when we want to add controls to click between slides.
The classes provide the styling and formatting.
The data-ride attribute provides the interactivity and slide transitions.
We also have a nested <div class="carousel-inner"> element that contains other <div> elements with images.
Nested inside the 2nd <div> is yet another <div> with a class of "carousel-item" and "active" (only one image needs the active class, if none have active, no images are shown).
Each <div> with .carousel-item has a nested <img> element which have the usual src and alt attributes.
The <img> elements use two utility classes"d-block" sets its display as block and the "w-100" is to take up 100% of the width.
Now, let’s implement a carousel with arrows that control the slideshow.

1.
The HTML skeleton of a carousel is already in index.html but you need to add the appropriate class values to the <div> elements. The parent <div> element should also have a data-ride attribute with the appropriate value.

Look over Bootstrap’s slides only example for reference.

Observe the example’s classes found in the documentation.

Remember to add the data-ride="carousel" attribute to the <div> with id "gardeningCarousel".

Also, add the class "active" to a <div> that has a class of "carousel-item", otherwise, the images won’t appear!

2.
Now that the carousel is in place, let’s add some controls for users to click through the slides.

You have to use Bootstrap’s with controls example to implement this feature. Check out the hint for additional help!

You can copy and paste both <a> elements inside the carousel’s parent <div>. However, remember to change the value of the href to match the value of the parent <div>‘s id.

Review
Go ahead and give yourself that well-deserved pat on the back, you’ve worked your way through Bootstrap utility classes and components!

Remember, it is extremely important to check Bootstrap documentation for instructions on component implementation!

Because we checked documentation we were able to use:

animations and interactivity that requires the addition of Bootstrap’s JavaScript files.
utility classes which affect the styling and position of elements.
the nav component provides default Bootstrap styling to links.
the responsive navbar component to quickly navigate between webpages.
the jumbotron component which prominently displays an image or text.
the card component that acts as a stylized content container.
collapse to toggle component visibility.
the carousel component to create a slideshow which displays images or text.
Now, go forth and see what else you can bootstrap to your site!

Instructions
If you want to challenge yourself:

Add different Bootstrap components not covered in this lesson.
Explore Bootstrap utility classes not covered in this lesson.
Make the webpage mobile friendly.
Create the other pages needed for Gloria’s Gardening.
Link to the appropriate pages.